// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `client_api.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Message {
    // message oneof groups
    pub field_type: ::std::option::Option<Message_oneof_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Message_oneof_type {
    functionCall(FunctionCall),
    subscriptionUpdate(SubscriptionUpdate),
    event(Event),
    transactionUpdate(TransactionUpdate),
    identityToken(IdentityToken),
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // .client_api.FunctionCall functionCall = 1;


    pub fn get_functionCall(&self) -> &FunctionCall {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::functionCall(ref v)) => v,
            _ => <FunctionCall as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_functionCall(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_functionCall(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::functionCall(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_functionCall(&mut self, v: FunctionCall) {
        self.field_type = ::std::option::Option::Some(Message_oneof_type::functionCall(v))
    }

    // Mutable pointer to the field.
    pub fn mut_functionCall(&mut self) -> &mut FunctionCall {
        if let ::std::option::Option::Some(Message_oneof_type::functionCall(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Message_oneof_type::functionCall(FunctionCall::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::functionCall(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_functionCall(&mut self) -> FunctionCall {
        if self.has_functionCall() {
            match self.field_type.take() {
                ::std::option::Option::Some(Message_oneof_type::functionCall(v)) => v,
                _ => panic!(),
            }
        } else {
            FunctionCall::new()
        }
    }

    // .client_api.SubscriptionUpdate subscriptionUpdate = 2;


    pub fn get_subscriptionUpdate(&self) -> &SubscriptionUpdate {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::subscriptionUpdate(ref v)) => v,
            _ => <SubscriptionUpdate as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_subscriptionUpdate(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_subscriptionUpdate(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::subscriptionUpdate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_subscriptionUpdate(&mut self, v: SubscriptionUpdate) {
        self.field_type = ::std::option::Option::Some(Message_oneof_type::subscriptionUpdate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_subscriptionUpdate(&mut self) -> &mut SubscriptionUpdate {
        if let ::std::option::Option::Some(Message_oneof_type::subscriptionUpdate(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Message_oneof_type::subscriptionUpdate(SubscriptionUpdate::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::subscriptionUpdate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_subscriptionUpdate(&mut self) -> SubscriptionUpdate {
        if self.has_subscriptionUpdate() {
            match self.field_type.take() {
                ::std::option::Option::Some(Message_oneof_type::subscriptionUpdate(v)) => v,
                _ => panic!(),
            }
        } else {
            SubscriptionUpdate::new()
        }
    }

    // .client_api.Event event = 3;


    pub fn get_event(&self) -> &Event {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::event(ref v)) => v,
            _ => <Event as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_event(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_event(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::event(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: Event) {
        self.field_type = ::std::option::Option::Some(Message_oneof_type::event(v))
    }

    // Mutable pointer to the field.
    pub fn mut_event(&mut self) -> &mut Event {
        if let ::std::option::Option::Some(Message_oneof_type::event(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Message_oneof_type::event(Event::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::event(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_event(&mut self) -> Event {
        if self.has_event() {
            match self.field_type.take() {
                ::std::option::Option::Some(Message_oneof_type::event(v)) => v,
                _ => panic!(),
            }
        } else {
            Event::new()
        }
    }

    // .client_api.TransactionUpdate transactionUpdate = 4;


    pub fn get_transactionUpdate(&self) -> &TransactionUpdate {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::transactionUpdate(ref v)) => v,
            _ => <TransactionUpdate as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_transactionUpdate(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_transactionUpdate(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::transactionUpdate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_transactionUpdate(&mut self, v: TransactionUpdate) {
        self.field_type = ::std::option::Option::Some(Message_oneof_type::transactionUpdate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_transactionUpdate(&mut self) -> &mut TransactionUpdate {
        if let ::std::option::Option::Some(Message_oneof_type::transactionUpdate(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Message_oneof_type::transactionUpdate(TransactionUpdate::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::transactionUpdate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_transactionUpdate(&mut self) -> TransactionUpdate {
        if self.has_transactionUpdate() {
            match self.field_type.take() {
                ::std::option::Option::Some(Message_oneof_type::transactionUpdate(v)) => v,
                _ => panic!(),
            }
        } else {
            TransactionUpdate::new()
        }
    }

    // .client_api.IdentityToken identityToken = 5;


    pub fn get_identityToken(&self) -> &IdentityToken {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::identityToken(ref v)) => v,
            _ => <IdentityToken as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_identityToken(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_identityToken(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::identityToken(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_identityToken(&mut self, v: IdentityToken) {
        self.field_type = ::std::option::Option::Some(Message_oneof_type::identityToken(v))
    }

    // Mutable pointer to the field.
    pub fn mut_identityToken(&mut self) -> &mut IdentityToken {
        if let ::std::option::Option::Some(Message_oneof_type::identityToken(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Message_oneof_type::identityToken(IdentityToken::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Message_oneof_type::identityToken(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_identityToken(&mut self) -> IdentityToken {
        if self.has_identityToken() {
            match self.field_type.take() {
                ::std::option::Option::Some(Message_oneof_type::identityToken(v)) => v,
                _ => panic!(),
            }
        } else {
            IdentityToken::new()
        }
    }
}

impl ::protobuf::Message for Message {
    fn is_initialized(&self) -> bool {
        if let Some(Message_oneof_type::functionCall(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Message_oneof_type::subscriptionUpdate(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Message_oneof_type::event(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Message_oneof_type::transactionUpdate(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Message_oneof_type::identityToken(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Message_oneof_type::functionCall(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Message_oneof_type::subscriptionUpdate(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Message_oneof_type::event(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Message_oneof_type::transactionUpdate(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Message_oneof_type::identityToken(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &Message_oneof_type::functionCall(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_type::subscriptionUpdate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_type::event(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_type::transactionUpdate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Message_oneof_type::identityToken(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &Message_oneof_type::functionCall(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_type::subscriptionUpdate(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_type::event(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_type::transactionUpdate(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Message_oneof_type::identityToken(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Message {
        Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FunctionCall>(
                "functionCall",
                Message::has_functionCall,
                Message::get_functionCall,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SubscriptionUpdate>(
                "subscriptionUpdate",
                Message::has_subscriptionUpdate,
                Message::get_subscriptionUpdate,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Event>(
                "event",
                Message::has_event,
                Message::get_event,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TransactionUpdate>(
                "transactionUpdate",
                Message::has_transactionUpdate,
                Message::get_transactionUpdate,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, IdentityToken>(
                "identityToken",
                Message::has_identityToken,
                Message::get_identityToken,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Message>(
                "Message",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Message {
        static instance: ::protobuf::rt::LazyV2<Message> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Message::new)
    }
}

impl ::protobuf::Clear for Message {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IdentityToken {
    // message fields
    pub identity: ::std::vec::Vec<u8>,
    pub token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IdentityToken {
    fn default() -> &'a IdentityToken {
        <IdentityToken as ::protobuf::Message>::default_instance()
    }
}

impl IdentityToken {
    pub fn new() -> IdentityToken {
        ::std::default::Default::default()
    }

    // bytes identity = 1;


    pub fn get_identity(&self) -> &[u8] {
        &self.identity
    }
    pub fn clear_identity(&mut self) {
        self.identity.clear();
    }

    // Param is passed by value, moved
    pub fn set_identity(&mut self, v: ::std::vec::Vec<u8>) {
        self.identity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identity(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.identity
    }

    // Take field
    pub fn take_identity(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.identity, ::std::vec::Vec::new())
    }

    // string token = 2;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for IdentityToken {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.identity)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.identity.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.identity);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.identity.is_empty() {
            os.write_bytes(1, &self.identity)?;
        }
        if !self.token.is_empty() {
            os.write_string(2, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IdentityToken {
        IdentityToken::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "identity",
                |m: &IdentityToken| { &m.identity },
                |m: &mut IdentityToken| { &mut m.identity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &IdentityToken| { &m.token },
                |m: &mut IdentityToken| { &mut m.token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IdentityToken>(
                "IdentityToken",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IdentityToken {
        static instance: ::protobuf::rt::LazyV2<IdentityToken> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IdentityToken::new)
    }
}

impl ::protobuf::Clear for IdentityToken {
    fn clear(&mut self) {
        self.identity.clear();
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IdentityToken {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdentityToken {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FunctionCall {
    // message fields
    pub reducer: ::std::string::String,
    pub argBytes: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FunctionCall {
    fn default() -> &'a FunctionCall {
        <FunctionCall as ::protobuf::Message>::default_instance()
    }
}

impl FunctionCall {
    pub fn new() -> FunctionCall {
        ::std::default::Default::default()
    }

    // string reducer = 1;


    pub fn get_reducer(&self) -> &str {
        &self.reducer
    }
    pub fn clear_reducer(&mut self) {
        self.reducer.clear();
    }

    // Param is passed by value, moved
    pub fn set_reducer(&mut self, v: ::std::string::String) {
        self.reducer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reducer(&mut self) -> &mut ::std::string::String {
        &mut self.reducer
    }

    // Take field
    pub fn take_reducer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.reducer, ::std::string::String::new())
    }

    // bytes argBytes = 2;


    pub fn get_argBytes(&self) -> &[u8] {
        &self.argBytes
    }
    pub fn clear_argBytes(&mut self) {
        self.argBytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_argBytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.argBytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_argBytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.argBytes
    }

    // Take field
    pub fn take_argBytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.argBytes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for FunctionCall {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.reducer)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.argBytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.reducer.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.reducer);
        }
        if !self.argBytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.argBytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.reducer.is_empty() {
            os.write_string(1, &self.reducer)?;
        }
        if !self.argBytes.is_empty() {
            os.write_bytes(2, &self.argBytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FunctionCall {
        FunctionCall::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reducer",
                |m: &FunctionCall| { &m.reducer },
                |m: &mut FunctionCall| { &mut m.reducer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "argBytes",
                |m: &FunctionCall| { &m.argBytes },
                |m: &mut FunctionCall| { &mut m.argBytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FunctionCall>(
                "FunctionCall",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FunctionCall {
        static instance: ::protobuf::rt::LazyV2<FunctionCall> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FunctionCall::new)
    }
}

impl ::protobuf::Clear for FunctionCall {
    fn clear(&mut self) {
        self.reducer.clear();
        self.argBytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FunctionCall {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FunctionCall {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Event {
    // message fields
    pub timestamp: u64,
    pub callerIdentity: ::std::vec::Vec<u8>,
    pub functionCall: ::protobuf::SingularPtrField<FunctionCall>,
    pub status: Event_Status,
    pub message: ::std::string::String,
    pub energy_quanta_used: i64,
    pub host_execution_duration_micros: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    // uint64 timestamp = 1;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // bytes callerIdentity = 2;


    pub fn get_callerIdentity(&self) -> &[u8] {
        &self.callerIdentity
    }
    pub fn clear_callerIdentity(&mut self) {
        self.callerIdentity.clear();
    }

    // Param is passed by value, moved
    pub fn set_callerIdentity(&mut self, v: ::std::vec::Vec<u8>) {
        self.callerIdentity = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_callerIdentity(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.callerIdentity
    }

    // Take field
    pub fn take_callerIdentity(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.callerIdentity, ::std::vec::Vec::new())
    }

    // .client_api.FunctionCall functionCall = 3;


    pub fn get_functionCall(&self) -> &FunctionCall {
        self.functionCall.as_ref().unwrap_or_else(|| <FunctionCall as ::protobuf::Message>::default_instance())
    }
    pub fn clear_functionCall(&mut self) {
        self.functionCall.clear();
    }

    pub fn has_functionCall(&self) -> bool {
        self.functionCall.is_some()
    }

    // Param is passed by value, moved
    pub fn set_functionCall(&mut self, v: FunctionCall) {
        self.functionCall = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_functionCall(&mut self) -> &mut FunctionCall {
        if self.functionCall.is_none() {
            self.functionCall.set_default();
        }
        self.functionCall.as_mut().unwrap()
    }

    // Take field
    pub fn take_functionCall(&mut self) -> FunctionCall {
        self.functionCall.take().unwrap_or_else(|| FunctionCall::new())
    }

    // .client_api.Event.Status status = 4;


    pub fn get_status(&self) -> Event_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = Event_Status::committed;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Event_Status) {
        self.status = v;
    }

    // string message = 5;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // int64 energy_quanta_used = 6;


    pub fn get_energy_quanta_used(&self) -> i64 {
        self.energy_quanta_used
    }
    pub fn clear_energy_quanta_used(&mut self) {
        self.energy_quanta_used = 0;
    }

    // Param is passed by value, moved
    pub fn set_energy_quanta_used(&mut self, v: i64) {
        self.energy_quanta_used = v;
    }

    // uint64 host_execution_duration_micros = 7;


    pub fn get_host_execution_duration_micros(&self) -> u64 {
        self.host_execution_duration_micros
    }
    pub fn clear_host_execution_duration_micros(&mut self) {
        self.host_execution_duration_micros = 0;
    }

    // Param is passed by value, moved
    pub fn set_host_execution_duration_micros(&mut self, v: u64) {
        self.host_execution_duration_micros = v;
    }
}

impl ::protobuf::Message for Event {
    fn is_initialized(&self) -> bool {
        for v in &self.functionCall {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.callerIdentity)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.functionCall)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.energy_quanta_used = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.host_execution_duration_micros = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.callerIdentity.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.callerIdentity);
        }
        if let Some(ref v) = self.functionCall.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.status != Event_Status::committed {
            my_size += ::protobuf::rt::enum_size(4, self.status);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.message);
        }
        if self.energy_quanta_used != 0 {
            my_size += ::protobuf::rt::value_size(6, self.energy_quanta_used, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.host_execution_duration_micros != 0 {
            my_size += ::protobuf::rt::value_size(7, self.host_execution_duration_micros, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_uint64(1, self.timestamp)?;
        }
        if !self.callerIdentity.is_empty() {
            os.write_bytes(2, &self.callerIdentity)?;
        }
        if let Some(ref v) = self.functionCall.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.status != Event_Status::committed {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if !self.message.is_empty() {
            os.write_string(5, &self.message)?;
        }
        if self.energy_quanta_used != 0 {
            os.write_int64(6, self.energy_quanta_used)?;
        }
        if self.host_execution_duration_micros != 0 {
            os.write_uint64(7, self.host_execution_duration_micros)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Event {
        Event::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &Event| { &m.timestamp },
                |m: &mut Event| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "callerIdentity",
                |m: &Event| { &m.callerIdentity },
                |m: &mut Event| { &mut m.callerIdentity },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FunctionCall>>(
                "functionCall",
                |m: &Event| { &m.functionCall },
                |m: &mut Event| { &mut m.functionCall },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Event_Status>>(
                "status",
                |m: &Event| { &m.status },
                |m: &mut Event| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &Event| { &m.message },
                |m: &mut Event| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "energy_quanta_used",
                |m: &Event| { &m.energy_quanta_used },
                |m: &mut Event| { &mut m.energy_quanta_used },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "host_execution_duration_micros",
                |m: &Event| { &m.host_execution_duration_micros },
                |m: &mut Event| { &mut m.host_execution_duration_micros },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Event>(
                "Event",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Event {
        static instance: ::protobuf::rt::LazyV2<Event> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Event::new)
    }
}

impl ::protobuf::Clear for Event {
    fn clear(&mut self) {
        self.timestamp = 0;
        self.callerIdentity.clear();
        self.functionCall.clear();
        self.status = Event_Status::committed;
        self.message.clear();
        self.energy_quanta_used = 0;
        self.host_execution_duration_micros = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Event {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Event_Status {
    committed = 0,
    failed = 1,
    out_of_energy = 2,
}

impl ::protobuf::ProtobufEnum for Event_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Event_Status> {
        match value {
            0 => ::std::option::Option::Some(Event_Status::committed),
            1 => ::std::option::Option::Some(Event_Status::failed),
            2 => ::std::option::Option::Some(Event_Status::out_of_energy),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Event_Status] = &[
            Event_Status::committed,
            Event_Status::failed,
            Event_Status::out_of_energy,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Event_Status>("Event.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Event_Status {
}

impl ::std::default::Default for Event_Status {
    fn default() -> Self {
        Event_Status::committed
    }
}

impl ::protobuf::reflect::ProtobufValue for Event_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubscriptionUpdate {
    // message fields
    pub tableUpdates: ::protobuf::RepeatedField<TableUpdate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscriptionUpdate {
    fn default() -> &'a SubscriptionUpdate {
        <SubscriptionUpdate as ::protobuf::Message>::default_instance()
    }
}

impl SubscriptionUpdate {
    pub fn new() -> SubscriptionUpdate {
        ::std::default::Default::default()
    }

    // repeated .client_api.TableUpdate tableUpdates = 1;


    pub fn get_tableUpdates(&self) -> &[TableUpdate] {
        &self.tableUpdates
    }
    pub fn clear_tableUpdates(&mut self) {
        self.tableUpdates.clear();
    }

    // Param is passed by value, moved
    pub fn set_tableUpdates(&mut self, v: ::protobuf::RepeatedField<TableUpdate>) {
        self.tableUpdates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tableUpdates(&mut self) -> &mut ::protobuf::RepeatedField<TableUpdate> {
        &mut self.tableUpdates
    }

    // Take field
    pub fn take_tableUpdates(&mut self) -> ::protobuf::RepeatedField<TableUpdate> {
        ::std::mem::replace(&mut self.tableUpdates, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SubscriptionUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.tableUpdates {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tableUpdates)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.tableUpdates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.tableUpdates {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscriptionUpdate {
        SubscriptionUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TableUpdate>>(
                "tableUpdates",
                |m: &SubscriptionUpdate| { &m.tableUpdates },
                |m: &mut SubscriptionUpdate| { &mut m.tableUpdates },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubscriptionUpdate>(
                "SubscriptionUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubscriptionUpdate {
        static instance: ::protobuf::rt::LazyV2<SubscriptionUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubscriptionUpdate::new)
    }
}

impl ::protobuf::Clear for SubscriptionUpdate {
    fn clear(&mut self) {
        self.tableUpdates.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscriptionUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscriptionUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TableUpdate {
    // message fields
    pub tableId: u32,
    pub tableName: ::std::string::String,
    pub tableRowOperations: ::protobuf::RepeatedField<TableRowOperation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TableUpdate {
    fn default() -> &'a TableUpdate {
        <TableUpdate as ::protobuf::Message>::default_instance()
    }
}

impl TableUpdate {
    pub fn new() -> TableUpdate {
        ::std::default::Default::default()
    }

    // uint32 tableId = 1;


    pub fn get_tableId(&self) -> u32 {
        self.tableId
    }
    pub fn clear_tableId(&mut self) {
        self.tableId = 0;
    }

    // Param is passed by value, moved
    pub fn set_tableId(&mut self, v: u32) {
        self.tableId = v;
    }

    // string tableName = 2;


    pub fn get_tableName(&self) -> &str {
        &self.tableName
    }
    pub fn clear_tableName(&mut self) {
        self.tableName.clear();
    }

    // Param is passed by value, moved
    pub fn set_tableName(&mut self, v: ::std::string::String) {
        self.tableName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tableName(&mut self) -> &mut ::std::string::String {
        &mut self.tableName
    }

    // Take field
    pub fn take_tableName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tableName, ::std::string::String::new())
    }

    // repeated .client_api.TableRowOperation tableRowOperations = 3;


    pub fn get_tableRowOperations(&self) -> &[TableRowOperation] {
        &self.tableRowOperations
    }
    pub fn clear_tableRowOperations(&mut self) {
        self.tableRowOperations.clear();
    }

    // Param is passed by value, moved
    pub fn set_tableRowOperations(&mut self, v: ::protobuf::RepeatedField<TableRowOperation>) {
        self.tableRowOperations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tableRowOperations(&mut self) -> &mut ::protobuf::RepeatedField<TableRowOperation> {
        &mut self.tableRowOperations
    }

    // Take field
    pub fn take_tableRowOperations(&mut self) -> ::protobuf::RepeatedField<TableRowOperation> {
        ::std::mem::replace(&mut self.tableRowOperations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TableUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.tableRowOperations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tableId = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tableName)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tableRowOperations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tableId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.tableId, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.tableName.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tableName);
        }
        for value in &self.tableRowOperations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tableId != 0 {
            os.write_uint32(1, self.tableId)?;
        }
        if !self.tableName.is_empty() {
            os.write_string(2, &self.tableName)?;
        }
        for v in &self.tableRowOperations {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TableUpdate {
        TableUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "tableId",
                |m: &TableUpdate| { &m.tableId },
                |m: &mut TableUpdate| { &mut m.tableId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tableName",
                |m: &TableUpdate| { &m.tableName },
                |m: &mut TableUpdate| { &mut m.tableName },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TableRowOperation>>(
                "tableRowOperations",
                |m: &TableUpdate| { &m.tableRowOperations },
                |m: &mut TableUpdate| { &mut m.tableRowOperations },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TableUpdate>(
                "TableUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TableUpdate {
        static instance: ::protobuf::rt::LazyV2<TableUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TableUpdate::new)
    }
}

impl ::protobuf::Clear for TableUpdate {
    fn clear(&mut self) {
        self.tableId = 0;
        self.tableName.clear();
        self.tableRowOperations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TableUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TableUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TableRowOperation {
    // message fields
    pub op: TableRowOperation_OperationType,
    pub row_pk: ::std::vec::Vec<u8>,
    pub row: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TableRowOperation {
    fn default() -> &'a TableRowOperation {
        <TableRowOperation as ::protobuf::Message>::default_instance()
    }
}

impl TableRowOperation {
    pub fn new() -> TableRowOperation {
        ::std::default::Default::default()
    }

    // .client_api.TableRowOperation.OperationType op = 1;


    pub fn get_op(&self) -> TableRowOperation_OperationType {
        self.op
    }
    pub fn clear_op(&mut self) {
        self.op = TableRowOperation_OperationType::DELETE;
    }

    // Param is passed by value, moved
    pub fn set_op(&mut self, v: TableRowOperation_OperationType) {
        self.op = v;
    }

    // bytes row_pk = 2;


    pub fn get_row_pk(&self) -> &[u8] {
        &self.row_pk
    }
    pub fn clear_row_pk(&mut self) {
        self.row_pk.clear();
    }

    // Param is passed by value, moved
    pub fn set_row_pk(&mut self, v: ::std::vec::Vec<u8>) {
        self.row_pk = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row_pk(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.row_pk
    }

    // Take field
    pub fn take_row_pk(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.row_pk, ::std::vec::Vec::new())
    }

    // bytes row = 3;


    pub fn get_row(&self) -> &[u8] {
        &self.row
    }
    pub fn clear_row(&mut self) {
        self.row.clear();
    }

    // Param is passed by value, moved
    pub fn set_row(&mut self, v: ::std::vec::Vec<u8>) {
        self.row = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_row(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.row
    }

    // Take field
    pub fn take_row(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.row, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for TableRowOperation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.op, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.row_pk)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.row)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.op != TableRowOperation_OperationType::DELETE {
            my_size += ::protobuf::rt::enum_size(1, self.op);
        }
        if !self.row_pk.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.row_pk);
        }
        if !self.row.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.row);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.op != TableRowOperation_OperationType::DELETE {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.op))?;
        }
        if !self.row_pk.is_empty() {
            os.write_bytes(2, &self.row_pk)?;
        }
        if !self.row.is_empty() {
            os.write_bytes(3, &self.row)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TableRowOperation {
        TableRowOperation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TableRowOperation_OperationType>>(
                "op",
                |m: &TableRowOperation| { &m.op },
                |m: &mut TableRowOperation| { &mut m.op },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "row_pk",
                |m: &TableRowOperation| { &m.row_pk },
                |m: &mut TableRowOperation| { &mut m.row_pk },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "row",
                |m: &TableRowOperation| { &m.row },
                |m: &mut TableRowOperation| { &mut m.row },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TableRowOperation>(
                "TableRowOperation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TableRowOperation {
        static instance: ::protobuf::rt::LazyV2<TableRowOperation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TableRowOperation::new)
    }
}

impl ::protobuf::Clear for TableRowOperation {
    fn clear(&mut self) {
        self.op = TableRowOperation_OperationType::DELETE;
        self.row_pk.clear();
        self.row.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TableRowOperation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TableRowOperation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TableRowOperation_OperationType {
    DELETE = 0,
    INSERT = 1,
}

impl ::protobuf::ProtobufEnum for TableRowOperation_OperationType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TableRowOperation_OperationType> {
        match value {
            0 => ::std::option::Option::Some(TableRowOperation_OperationType::DELETE),
            1 => ::std::option::Option::Some(TableRowOperation_OperationType::INSERT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TableRowOperation_OperationType] = &[
            TableRowOperation_OperationType::DELETE,
            TableRowOperation_OperationType::INSERT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TableRowOperation_OperationType>("TableRowOperation.OperationType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TableRowOperation_OperationType {
}

impl ::std::default::Default for TableRowOperation_OperationType {
    fn default() -> Self {
        TableRowOperation_OperationType::DELETE
    }
}

impl ::protobuf::reflect::ProtobufValue for TableRowOperation_OperationType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionUpdate {
    // message fields
    pub event: ::protobuf::SingularPtrField<Event>,
    pub subscriptionUpdate: ::protobuf::SingularPtrField<SubscriptionUpdate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionUpdate {
    fn default() -> &'a TransactionUpdate {
        <TransactionUpdate as ::protobuf::Message>::default_instance()
    }
}

impl TransactionUpdate {
    pub fn new() -> TransactionUpdate {
        ::std::default::Default::default()
    }

    // .client_api.Event event = 1;


    pub fn get_event(&self) -> &Event {
        self.event.as_ref().unwrap_or_else(|| <Event as ::protobuf::Message>::default_instance())
    }
    pub fn clear_event(&mut self) {
        self.event.clear();
    }

    pub fn has_event(&self) -> bool {
        self.event.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: Event) {
        self.event = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_event(&mut self) -> &mut Event {
        if self.event.is_none() {
            self.event.set_default();
        }
        self.event.as_mut().unwrap()
    }

    // Take field
    pub fn take_event(&mut self) -> Event {
        self.event.take().unwrap_or_else(|| Event::new())
    }

    // .client_api.SubscriptionUpdate subscriptionUpdate = 2;


    pub fn get_subscriptionUpdate(&self) -> &SubscriptionUpdate {
        self.subscriptionUpdate.as_ref().unwrap_or_else(|| <SubscriptionUpdate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_subscriptionUpdate(&mut self) {
        self.subscriptionUpdate.clear();
    }

    pub fn has_subscriptionUpdate(&self) -> bool {
        self.subscriptionUpdate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_subscriptionUpdate(&mut self, v: SubscriptionUpdate) {
        self.subscriptionUpdate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subscriptionUpdate(&mut self) -> &mut SubscriptionUpdate {
        if self.subscriptionUpdate.is_none() {
            self.subscriptionUpdate.set_default();
        }
        self.subscriptionUpdate.as_mut().unwrap()
    }

    // Take field
    pub fn take_subscriptionUpdate(&mut self) -> SubscriptionUpdate {
        self.subscriptionUpdate.take().unwrap_or_else(|| SubscriptionUpdate::new())
    }
}

impl ::protobuf::Message for TransactionUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.event {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.subscriptionUpdate {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.event)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.subscriptionUpdate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.event.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.subscriptionUpdate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.event.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.subscriptionUpdate.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionUpdate {
        TransactionUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Event>>(
                "event",
                |m: &TransactionUpdate| { &m.event },
                |m: &mut TransactionUpdate| { &mut m.event },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SubscriptionUpdate>>(
                "subscriptionUpdate",
                |m: &TransactionUpdate| { &m.subscriptionUpdate },
                |m: &mut TransactionUpdate| { &mut m.subscriptionUpdate },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionUpdate>(
                "TransactionUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionUpdate {
        static instance: ::protobuf::rt::LazyV2<TransactionUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionUpdate::new)
    }
}

impl ::protobuf::Clear for TransactionUpdate {
    fn clear(&mut self) {
        self.event.clear();
        self.subscriptionUpdate.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10client_api.proto\x12\nclient_api\"\xec\x02\n\x07Message\x12@\n\x0c\
    functionCall\x18\x01\x20\x01(\x0b2\x18.client_api.FunctionCallH\0R\x0cfu\
    nctionCallB\0\x12R\n\x12subscriptionUpdate\x18\x02\x20\x01(\x0b2\x1e.cli\
    ent_api.SubscriptionUpdateH\0R\x12subscriptionUpdateB\0\x12+\n\x05event\
    \x18\x03\x20\x01(\x0b2\x11.client_api.EventH\0R\x05eventB\0\x12O\n\x11tr\
    ansactionUpdate\x18\x04\x20\x01(\x0b2\x1d.client_api.TransactionUpdateH\
    \0R\x11transactionUpdateB\0\x12C\n\ridentityToken\x18\x05\x20\x01(\x0b2\
    \x19.client_api.IdentityTokenH\0R\ridentityTokenB\0B\x06\n\x04type:\0\"G\
    \n\rIdentityToken\x12\x1c\n\x08identity\x18\x01\x20\x01(\x0cR\x08identit\
    yB\0\x12\x16\n\x05token\x18\x02\x20\x01(\tR\x05tokenB\0:\0\"J\n\x0cFunct\
    ionCall\x12\x1a\n\x07reducer\x18\x01\x20\x01(\tR\x07reducerB\0\x12\x1c\n\
    \x08argBytes\x18\x02\x20\x01(\x0cR\x08argBytesB\0:\0\"\x94\x03\n\x05Even\
    t\x12\x1e\n\ttimestamp\x18\x01\x20\x01(\x04R\ttimestampB\0\x12(\n\x0ecal\
    lerIdentity\x18\x02\x20\x01(\x0cR\x0ecallerIdentityB\0\x12>\n\x0cfunctio\
    nCall\x18\x03\x20\x01(\x0b2\x18.client_api.FunctionCallR\x0cfunctionCall\
    B\0\x122\n\x06status\x18\x04\x20\x01(\x0e2\x18.client_api.Event.StatusR\
    \x06statusB\0\x12\x1a\n\x07message\x18\x05\x20\x01(\tR\x07messageB\0\x12\
    .\n\x12energy_quanta_used\x18\x06\x20\x01(\x03R\x10energyQuantaUsedB\0\
    \x12E\n\x1ehost_execution_duration_micros\x18\x07\x20\x01(\x04R\x1bhostE\
    xecutionDurationMicrosB\0\"8\n\x06Status\x12\r\n\tcommitted\x10\0\x12\n\
    \n\x06failed\x10\x01\x12\x11\n\rout_of_energy\x10\x02\x1a\0:\0\"U\n\x12S\
    ubscriptionUpdate\x12=\n\x0ctableUpdates\x18\x01\x20\x03(\x0b2\x17.clien\
    t_api.TableUpdateR\x0ctableUpdatesB\0:\0\"\x9c\x01\n\x0bTableUpdate\x12\
    \x1a\n\x07tableId\x18\x01\x20\x01(\rR\x07tableIdB\0\x12\x1e\n\ttableName\
    \x18\x02\x20\x01(\tR\ttableNameB\0\x12O\n\x12tableRowOperations\x18\x03\
    \x20\x03(\x0b2\x1d.client_api.TableRowOperationR\x12tableRowOperationsB\
    \0:\0\"\xac\x01\n\x11TableRowOperation\x12=\n\x02op\x18\x01\x20\x01(\x0e\
    2+.client_api.TableRowOperation.OperationTypeR\x02opB\0\x12\x17\n\x06row\
    _pk\x18\x02\x20\x01(\x0cR\x05rowPkB\0\x12\x12\n\x03row\x18\x03\x20\x01(\
    \x0cR\x03rowB\0\")\n\rOperationType\x12\n\n\x06DELETE\x10\0\x12\n\n\x06I\
    NSERT\x10\x01\x1a\0:\0\"\x92\x01\n\x11TransactionUpdate\x12)\n\x05event\
    \x18\x01\x20\x01(\x0b2\x11.client_api.EventR\x05eventB\0\x12P\n\x12subsc\
    riptionUpdate\x18\x02\x20\x01(\x0b2\x1e.client_api.SubscriptionUpdateR\
    \x12subscriptionUpdateB\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
